总结：
串行GC：单核，每次Gc都需要暂停所有线程，浪费多核CPU；因为每次都需要暂停全部线程，越往后暂停时间增加，直接影响程序，容易发生卡顿等现象；只适合几百 MB 堆内存的 JVM，而且是单核 CPU 时比较有用;jvm内存到1g后GC暂停严重。
并行GC：多核，JDK7、8默认的GC;每次GC也会出发STW事件，但因为是多线程并发处理，导致GC时间大幅度缩减，充分利用多核CPU，增加吞吐量；适合多核、1-4g内存的服务器；jvm降低到512m或者更低时，GC次数频繁且CPU消耗逐渐增大。
CMS GC：多线程并发处理GC，因为只在阶段1跟4才会出发STW，所以期间会并发处理其他阶段性工作，极大减少STW引起的暂停时间，所以能降低应用的停顿延迟；但任然会与应用线程争夺CPU,线程数从1/4增加到与核数相同时，GC效果明显逐渐降低，但小于1/4时，STW时间明显增大。
G1 GC：
堆内存：
	eden：内存大小与GC次数成反比，但与STW时间成正比
	S1和S2：过小容易出现过大对象问题，过大增加GC STW时间
	old：过小则增加full GC次数，还会导致OOM现象；过大则full GC频率减少但时长增加
